1.  Цепочка обязанностей.
    фильтры спринг. ClassLoaders.
2.  команда  когда нужно инкапсулировать действие в объекте.
    Вычисление простых чисел.
    interface Command{
        Number execute();
    }
    class AddCommand implements Command {
        private int op1, op2;
        private Number[] oper;
        Number execute() {

        }
    }
3. Интепретатор
4. Итератор
    Пусть есть коллекция.
5. Медиатор. Повторное использование связных объектов сложно.
6. Memento. Через внутренний класс.
    сам объект
    состояние
    хранитель
7. Наблюдатель. Обновить виджеты.
8. State. изменение поведения объекта при изменении состояния.
9. Стратегия. Применяется если в алгоритме во множестве мест применяется метод класса. Хэширование.
10.Template method. Определяет сам алгоритм и позволяет наследникам переопределять малые части.
    ClassLoader for example. Как можно чаще.
11.Visitor. Самый сложный. Позволяет добавить функционал объекту не внося в него изменения. Есть метод визит.
    Есть АцептВиситор.
    void accept(Visitor v) {
        v.visit(this)
    }
    interface Visitor {
        void visit(Clinet arg); //конкретная делает что-то свое.
    }
    myObject.accept(mew FirstFoeffVisitorCalculator());
Калькулятор. Ввести название команды. add mult div sub. Команда.

