ytghbdjlbvsq тип
chfdytybt c литералом
getValue
Object
Порядок вызова конструкторов статических объектных инициализаторов... и при наследовании
2 {initializator;}a
finally перетирает все ошибки
out буферизуемый ерр сразу выбрасывает
демон и system.exit
unchecked illegal monitor state 0 блокировок если
!threadlocal

concurrent readlocck writelock
критические секции
Lock ReentrantLock finally{unlock();}
Сущьность связанная с каждым объектом - монитор.
!cas? compare and swap 10*const время;

Льву

	Типы данных.
	Какой тип данных не приводим к другим.

	Integer i = null;
	sout(i == 5); //NullPointerException

	String s = "123";
	String s2 = "123";
	sout(s==s2);

	String s = "123";
	String s2 = new String("123");
	sout(s==s2);

	Integer i = null;
	int s =  i;
	sout(s == i);//NullPointerException

	Что можно сказать о Object. Методы класса object. Что о методах equals и hashcode.
	Что будет переопредлим equals, но не hashcode. Как поумолчанию переопределен hashcode.
	//Поумолчанию хешкод будет возвращать разное значение для одинаковых объектов. Объекты упадут в разные бакеты.

	Для чего используются методы wait() notify() notifyall()

	Каким образом создаются аннотации.
	//@Retention @Target
	Что означает @RetentionPolicy

	Назовите source аннотацию.//@Override

	Какой RetentionPolicy устанавливается поумолчанию.

------------------------------------------------------------
	class A{
		static{
			sout("HHH");
		}

		{
			sout("111");
		}

		{
			sout("sdddss");
		}

		public A(int arg) {
			sout(arg);
		}
	}

	class B extends A{
		static{
			sout("HJ");
		}

		{
			sout("KG");
		}

		{
			sout("GH");
		}

		public B(int arg){
			super(arg);
		}
	}
------------------------------------------------------------
class A implements Comparable<Integer>, Serializable, Comparable<String>{
	//Error
}

------------------------------------------------------------

Иерархия исключений джава.

Что такое асинхронный и синхронный выброс ошибки. //Error выбрасывается асинхронно. Если на рантайм можно поставить кетч блок, то на еррор - нет. Синхронные всегда можно определить, что их вызвало.

------------------------------------------------------------

class MyException<T>

------------------------------------------------------------

Есть конструкция try-with-resources. Зачем она нужна?
Что будет если есть какой-либо код и в блоке catch есть return. return в блоке finally.

Есть блок try-with-resources(Дохрена ошибок)suspended exception.
Блок finally перетирает все исключения своим.

------------------------------------------------------------

Чем отличается System.out от System.error?
//out - буферризуем.
//error - получает - выводит.

Всегда ли исполняется блок finally?
//В потоках демонах не выполняется. System.exit()


IllegalMonitorStateException

Сколько раз можно захватить блокировку на объект?
Можно ли рекурсивно вызывать синхронизированную функцию? - можно.

Что такое ThreadLocal?

Каким образом можно перехватить исключение, которое происходит в run снаружи?

Что делает метод notify()?

Какие условия на использования notify?

Какие есть способы выхода потока из блока wait?
Оказывается автопробуждение называется ложным.

Что такое программный порядок?
Порядок всех действий внутри потока, который гарантирует, что семантика не будет нарушена.


Что такое happens before?
Отношение между двумя дейсвиями, которое говорит о том, что

Пример happens before.
//Освобождение монитора до следующего захвата.
//Чтение и запись volatile переменной.


------------------------------------------------------------

...
int i = 5;
int j = 9;
init = true;



...
if(init) {
	sout(i);
}

что выведет.
------------------------------------------------------------

...
i = 5;
j = 9;
init = true;
i = 10;


...
if(init) {
	sout(i);
}
Что выведет.

------------------------------------------------------------
Map map = getMap();
Integer i = map.get(key);

if(i == null) {
	synchronized(monitor) {
		map.put(key, 1);
	}
}
//Непотокобезопасный код.
------------------------------------------------------------
Есть процесс чтения и записи. Как сделать чтение неблокирующим. А запись блокирующей.
//read-write lock в пакете concurrent.


Что такое lock в java util concurrent
Как блок называется? критическая секция.

Каким образом происходит снятие.
//Reentrant lock. Получаем его, делаем lock.lock() в блоке finally.


Что такое deadlock?

Что такое monitor? //С каждым объектом связан monitor. Некая сущность, которая связаная с объектом.

Что такое CAS в терминах многопоточности. //Compare and swap.
Что это такое и как реализован?
Сколько аргументов у CAS? У обычной write.(1)// Два, ожидаемое(сейчас) и то которое будет новым.
Что происходит когда неудачно записалось?
На каком уровне реализованна CAS? //На уровне процессоров.
Когда выгодней использовать CAS, а когда критические секции? // Все зависит от того, сколько у нас счетчиков.


Алуксандру
SystemArrayCopy
